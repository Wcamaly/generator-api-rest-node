#!/usr/bin/env node
'use strict'
/**
 * Module dependencies.
 */

const app = require('../app')
const debug = require('debug')('Server')
const chalk = require('chalk')
const http = require('http')

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);


const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */



/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}


/**
 * Event listener for process "error" event.
 */
function handlerFatalError (err) {
  console.error(`${chalk.red('[fatal Error]')} ${err.message}`)
  console.error(err.stack)
  process.exit(1)
}


/**
 * Create HTTP server.
 */

if (!module.parent) {
  process.on('uncaughtException', handlerFatalError)
  process.on('unhandledRejection', handlerFatalError)

  server.listen(port, () => {
    console.log(`${chalk.green('[Server]')} server listening on port ${port}`)
  })
  server.on('error', onError)
  server.on('listening', onListening)
}
